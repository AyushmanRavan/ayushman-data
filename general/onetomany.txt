https://asbnotebook.com/jpa-many-to-many-example-spring-boot/
https://refactorizando.com/ejemplo-relacion-onetomany-hibernate/

The best way to map a @OneToMany association is to rely on the @ManyToOne side to propagate all entity state changes.
https://medium.com/@rajibrath20/the-best-way-to-map-a-onetomany-relationship-with-jpa-and-hibernate-dbbf6dba00d3


Parent side should contain the addChild and removeChild combo(Parent side Company contains two utility methods addBranches and removeBranches). 
These methods ensure we always synchronize both sides of the association, to avoid object or relational data corruption issues.


company
--------
id(PK)   name   description

@Entity
public class Company  {  //(Parent)

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;

    @Column(name = "name")
    private String name;

    @Column(name = "description")
    private String description;

    @OneToMany( mappedBy = "company",cascade = CascadeType.ALL , fetch = FetchType.EAGER)
    //@JsonIgnore/@JsonBackReference
    private List<Branch> branches = new ArrayList<>();

    public void addBranches(Branch branch){
      if(branch != null){
        if (branches == null) {
            branches = new ArrayList<>();
        }
        this.branches.add(branch); 
        branch.setCompany(this);
      }
    }
    
    public void removeBranches(Branch branch){
        if(branch != null){
            branch.setCompany(null);
        }
        this.branches.remove(branch);    
    }

    //Accessors...
}


The child entity, Branch, implement the equals and hashCode methods.



branch
--------
id(PK)   name   company_id(FK)

@Entity
public class Branch {  // (Child)

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;

    @Column(name = "name")
    private string name;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)  ///A relationship may be optional or mandatory.
    @JoinColumn(name="company_id",nullable = false, foreignKey = @ForeignKey(name = "fk_name"))//Optional
    //@JsonIgnore/@JsonBackReference
    private Company company;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Branch )) return false;
        return id != null && id.equals(((Branch) o).getId());
    }

    @Override
    public int hashCode() {
        return 31;
    }

    //Accessors...
}



self-join one-to-many 
===============================
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.hibernate.annotations.*;

import javax.persistence.*;
import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.List;

@Entity
@Table(name = "category")
public class Category implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "category_id")
    private Integer categoryId;

    @Column(name = "category_name")
    private String categoryName;

    @ManyToOne(cascade={CascadeType.ALL})
    @JoinColumn(name = "parent_category_id")
    @NotFound(action = NotFoundAction.IGNORE)
    @JsonIgnore
    private Category mainCategory;

    @JsonSerialize(include = JsonSerialize.Inclusion.NON_EMPTY)//Avoiding empty json arrays.objects
    @OneToMany(mappedBy = "mainCategory", fetch = FetchType.EAGER)
    @NotFound(action = NotFoundAction.IGNORE)
    private List<Category> subCategory;

    public Integer getCategoryId() {
        return categoryId;
    }

    public void setCategoryId(Integer categoryId) {
        this.categoryId = categoryId;
    }

    public String getCategoryName() {
        return categoryName;
    }

    public void setCategoryName(String categoryName) {
        this.categoryName = categoryName;
    }

    public Category getMainCategory() {
        return mainCategory;
    }

    public void setMainCategory(Category mainCategory) {
        this.mainCategory = mainCategory;
    }

    public List<Category> getSubCategory() {
        return subCategory;
    }

    public void setSubCategory(List<Category> subCategory) {
        this.subCategory = subCategory;
    }

}