# Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.

input {
   beats {
    port => 5055
  }
}

filter {

	if "Exec-5" in [tags] {

		grok {
			match => {"message" => ".*?(?<data>[0-9]{8}-[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}).*\u000135=(?<tipoMensagem>.*?)\u0001.*?49=(?<senderCompId>.*?)\u0001.*?\u000156=(?<targetCompId>.*?)\u0001"}
		}

		date {
				match => [ "data", "YYYYMMdd-HH:mm:ss.SSS" ]
				timezone => "UTC"
		}
		
		if [log][file][path] =~ "Adapter" {

			if [log][file][path] =~ "Client" {
				mutate {
					add_field => {
						"camada" => "Adapter-In"
					}
				}	
			}else if [log][file][path] =~ "Server" {
				mutate {
					add_field => {
						"camada" => "Adapter-Out"
					}
				}	
			} else {
				mutate {
					add_field => {
						"camada" => "Adapter"
					}
				}
			}
			
		}else if [log][file][path] =~ "Autorizador" {

			if [log][file][path] =~ "Server" {
				mutate {
					add_field => {
						"camada" => "Autorizador-In"
					}
				}	
			}else if [log][file][path] =~ "Client" {
				mutate {
					add_field => {
						"camada" => "Autorizador-Out"
					}
				}	
			} else {
				mutate {
					add_field => {
						"camada" => "Autorizador"
					}
				}
			}
			
		} else if [log][file][path] =~ "OMS" {

			if [log][file][path] =~ "Client" {
				mutate {
					add_field => {
						"camada" => "OMS-In"
					}
				}	
			} else if [log][file][path] =~ "Server" {
				mutate {
					add_field => {
						"camada" => "OMS-Out"
					}
				}	
			} else {
				mutate {
					add_field => {
						"camada" => "OMS"
					}
				}
			}
			
		} else if [log][file][path] =~ "injetor" {

			mutate {
				add_field => {
					"camada" => "injetor"
				}
			}
			
		} else if [log][file][path] =~ "SimuladorB3" {
			
			mutate {
				add_field => {
					"camada" => "CCP"
				}
			}

		}
		
		if [tipoMensagem] in ["D","F","G"] {
			grok {
				match => {"message" => ".*\u0001.*?1=(?<account>.*?)\u0001.*?11=(?<clordId>.*?)\u0001.*?38=(?<quantity>.*?)\u0001.*?54=(?<side>.*?)\u0001.*?55=(?<instrumentSymbol>.*?)\u0001"}
			}

#  NAO UTILIZADO NA BLK
#			ruby {
#				code => '
#					clordIdGroup = event.get("clordId").split("_")
#					event.set("clordIdTipo",clordIdGroup[0])
#					event.set("clordIdNew",clordIdGroup[1])
				
#						if clordIdGroup[0] == "R"
#							 event.set("clordIdRltd",clordIdGroup[2])
#				end 
#				'
#			}		
			mutate {
				add_field => {
					"envioOuResposta" => "envio"
				}
			}
		}
		
		if [tipoMensagem] == "8" {


            grok {
                match => {"message" => ".*\u0001.*150=(?<execType>.*?)\u0001.*"}
			}


			if [execType] == "8"{
			
				grok {
                    match => {"message" => ".*\u0001.*58=(?<errdescription>.*?)\u0001.*"}
			    }

			    if [errdescription] =~ "OMS Session Reject" {
                    grok {
				        match => {"message" => ".*\u0001.*?11=(?<clordId>.*?)\u0001.*?38=(?<quantity>.*?)\u0001.*?54=(?<side>.*?)\u0001.*?55=(?<instrumentSymbol>.*?)\u0001"}
			        }
				}else if [errdescription] =~ "Stop limit order accepted by OMS" {
                    grok {
				        match => {"message" => ".*\u0001.*?11=(?<clordId>.*?)\u0001.*?38=(?<quantity>.*?)\u0001.*?54=(?<side>.*?)\u0001.*?55=(?<instrumentSymbol>.*?)\u0001"}
			        }
				}else if [errdescription] =~ "Incorrect value" {
                    grok {
				        match => {"message" => ".*\u0001.*?11=(?<clordId>.*?)\u0001.*?38=(?<quantity>.*?)\u0001.*?54=(?<side>.*?)\u0001.*?55=(?<instrumentSymbol>.*?)\u0001"}
			        }
                } else {
                    grok {
				        match => {"message" => ".*\u0001.*?1=(?<account>.*?)\u0001.*?11=(?<clordId>.*?)\u0001.*?38=(?<quantity>.*?)\u0001.*?54=(?<side>.*?)\u0001.*?55=(?<instrumentSymbol>.*?)\u0001"}
			        }

					grok {
						match => {"message" => ".*\u00011=(?<erraccount>.*?)\u0001.*11=(?<errClordId>.*?)\u0001.*55=(?<errInstrument>.*?)\u0001.*"}
					}
                }
				
				
			}else {

                grok {
				        match => {"message" => ".*\u0001.*?1=(?<account>.*?)\u0001.*?11=(?<clordId>.*?)\u0001.*?38=(?<quantity>.*?)\u0001.*?54=(?<side>.*?)\u0001.*?55=(?<instrumentSymbol>.*?)\u0001"}
                }
					
			}	
            

#  NAO UTILIZADO NA BLK
#			ruby {
#				code => '
#					clordIdGroup = event.get("clordId").split("_")
#					event.set("clordIdTipo",clordIdGroup[0])
#					event.set("clordIdNew",clordIdGroup[1])
				
#						if clordIdGroup[0] == "R"
#							 event.set("clordIdRltd",clordIdGroup[2])
#				end 
#				'
#			}
			
			mutate {
				add_field => {
					"envioOuResposta" => "resposta"
				}
			}
			
	
		}

		if [tipoMensagem] == "3" {
			grok {
				match => {"message" => ".*\u0001.*?58=(?<errdescription>.*?)\u0001.*"}
			}
			
			mutate {
				add_field => {
					"envioOuResposta" => "resposta"
				}
			}
		}		
		
		if [tipoMensagem] == "9" {
			           
            grok {
                match => {"message" => ".*\u0001.*58=(?<errdescription>.*?)\u0001.*"}
			}

			if [errdescription] == "Unknown Order!" {

                grok {
                    match => {"message" => ".*\u0001.*11=(?<errClordId>.*?)\u0001.*?41=(?<errOrigClordId>.*?)\u0001.*"}
                }
				
			}else if [errdescription] =~ "Order could not be found" {

                grok {
                    match => {"message" => ".*\u0001.*11=(?<errClordId>.*?)\u0001.*?41=(?<errOrigClordId>.*?)\u0001.*"}
                }
			}else if [errdescription] =~ "Duplicated ClOrdId!" {

                grok {
                    match => {"message" => ".*\u00011=(?<erraccount>.*?)\u0001.*11=(?<errClordId>.*?)\u000155=(?<errInstrument>.*?)\u0001.*"}
                }
			} else {
				grok {
					match => {"message" => ".*\u00011=(?<erraccount>.*?)\u0001.*11=(?<errClordId>.*?)\u0001.*?41=(?<errOrigClordId>.*?)\u000155=(?<errInstrument>.*?)\u0001.*"}
				}

			}
			
			mutate {
				add_field => {
					"envioOuResposta" => "resposta"
				}
			}
		}
				
		
#  NAO UTILIZADO NA BLK
#		if [clordIdTipo] == "R" {
#			grok {
#				match => {"message" => ".*\u0001.*?41=(?<origClordId>.*?)\u0001"}
#			}			
#		}

#		if "Log-FIX-Injetor-e-Mock" in [tags] {	
			mutate {
				add_field => {
					"index_name" => "oms-fixmessages"
				}
				remove_field => ["message"]
				}
#		}else {
#			mutate {
#				add_field => {
#					"index_name" => "oms-fixmessages"
#				}
#			}
#		}			
	}
}

output {


	if [type] == "syslog" {
		elasticsearch {
		hosts => ["localhost:9200"]
		index => "logstash-%{+YYYY.MM.dd}"
		}
	}
	
	if [type] == "nginx_access" {
		elasticsearch { 
		hosts => ["localhost:9200"]
		index => "nginx-%{+YYYY.MM.dd}"
		}
	}


	if "Exec-5" in [tags] {

#		file {
#			path => "/usr/share/logstash/logs/output.txt"
#	    	}
	#
		stdout { codec => rubydebug }

		elasticsearch {
            hosts => ["${DOCKER_HOSTNAME}:9200"]
			#hosts => ["10.50.0.133:9200","10.50.0.253:9200","10.50.0.245:9200"]
			#ssl => true
			user =>  "elastic"
			password => "changeme"
#			cacert => "L:\Tools_primeup\elk\logstash-7.3.2\config\elastic-ca.crt"
			index => "%{index_name}-%{+YYYY-MM-dd}"
			#document_type => "%{[@metadata][_type]}"
			#document_id => "%{[@metadata][_id]}"
		}
	}
}



















###########################################################################################################
# input {
#   file {
#     type => "log"
#     path => "/ELK/logs/application.log"    # Make sure you provide the absolute path of the file here
#     start_position => "beginning"
    # codec => multiline {
    #   pattern => "^%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{TIME}.*"     #Each new log event needs to start with date.
    #   negate => "true"                                            #if it doesn't start with a date.
    #   what => "previous"                                          # then it should be grouped with a previous line.
    # }
#   }
	# beats {  # Notice the input is now being taken from 'Beats' instead of a 'file'
	# 	type => "logs"
	# 	port => "5044" 
	# }
# }
######################http://knes1.github.io/blog/2015/2015-08-16-manage-spring-boot-logs-with-elasticsearch-kibana-and-logstash.html
# filter {
	#If log line contains tab character followed by 'at' then we will tag that entry as stacktrace
#   if [message] =~ "\tat" {
#     grok {
#       match => ["message", "^(\tat)"]
#       add_tag => ["stacktrace"]
#     }
#   }
#   mutate {
#     replace => { "[host]" => "%{[host][name]}" } 
#   }
# }

# output {
#   stdout {
#     codec => rubydebug
#   }
 
#   elasticsearch {
#     hosts => ["localhost:9200"]
#   }
# }